import tkinter as tk
from tkinter import messagebox, ttk
import re

class ContactManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Manager")
        self.contacts = []

        # Create main frame
        main_frame = tk.Frame(root, padx=20, pady=20, bg="#f2f2f2")
        main_frame.pack(padx=10, pady=10)

        # Create title label
        title_label = tk.Label(main_frame, text="Contact Manager", font=("Helvetica", 24, "bold"), bg="#f2f2f2")
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))

        # Create input fields for contact details
        self.create_input_fields(main_frame)

        # Create buttons for functionalities
        self.create_buttons(main_frame)

        # Create a separator
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.grid(row=8, column=0, columnspan=2, pady=10, sticky='ew')

        # Create a listbox to display contacts
        self.contact_listbox = tk.Listbox(main_frame, width=50, height=10, font=("Helvetica", 12))
        self.contact_listbox.grid(row=9, column=0, columnspan=2, pady=(10, 0))

    def create_input_fields(self, frame):
        # Name input
        self.name_label = tk.Label(frame, text="Name:", bg="#f2f2f2")
        self.name_label.grid(row=1, column=0, sticky='w', pady=5)
        self.name_entry = tk.Entry(frame, width=30)
        self.name_entry.grid(row=1, column=1, padx=10, pady=5)

        # Phone input
        self.phone_label = tk.Label(frame, text="Phone Number:", bg="#f2f2f2")
        self.phone_label.grid(row=2, column=0, sticky='w', pady=5)
        self.phone_entry = tk.Entry(frame, width=30)
        self.phone_entry.grid(row=2, column=1, padx=10, pady=5)

        # Email input
        self.email_label = tk.Label(frame, text="Email Address:", bg="#f2f2f2")
        self.email_label.grid(row=3, column=0, sticky='w', pady=5)
        self.email_entry = tk.Entry(frame, width=30)
        self.email_entry.grid(row=3, column=1, padx=10, pady=5)

    def create_buttons(self, frame):
        button_style = {'padx': 5, 'pady': 5, 'font': ('Helvetica', 12), 'bg': '#007acc', 'fg': 'white'}

        # Add Contact button
        self.add_button = tk.Button(frame, text="Add Contact", command=self.add_contact, **button_style)
        self.add_button.grid(row=4, column=0, pady=(10, 0))

        # View Contacts button
        self.view_button = tk.Button(frame, text="View Contacts", command=self.view_contacts, **button_style)
        self.view_button.grid(row=4, column=1, pady=(10, 0))

        # Edit Contact button
        self.edit_button = tk.Button(frame, text="Edit Contact", command=self.edit_contact, **button_style)
        self.edit_button.grid(row=5, column=0, pady=(10, 0))

        # Delete Contact button
        self.delete_button = tk.Button(frame, text="Delete Contact", command=self.delete_contact, **button_style)
        self.delete_button.grid(row=5, column=1, pady=(10, 0))

        # Search Contacts button
        self.search_button = tk.Button(frame, text="Search Contacts", command=self.search_contacts, **button_style)
        self.search_button.grid(row=6, column=0, pady=(10, 0))

        # Group Contacts button
        self.group_button = tk.Button(frame, text="Group Contacts", command=self.group_contacts, **button_style)
        self.group_button.grid(row=6, column=1, pady=(10, 0))

        # Sort Contacts button
        self.sort_button = tk.Button(frame, text="Sort Contacts", command=self.sort_contacts, **button_style)
        self.sort_button.grid(row=7, column=0, pady=(10, 0), columnspan=2)

    def add_contact(self):
        name = self.name_entry.get().strip()
        phone = self.phone_entry.get().strip()
        email = self.email_entry.get().strip()

        # Validate inputs
        if not name or not phone or not email:
            messagebox.showerror("Error", "All fields are required.")
            return
        if not phone.isdigit() or len(phone) != 10:
            messagebox.showerror("Error", "Phone number must be exactly 10 digits long and contain only numbers.")
            return
        if not self.validate_email(email):
            messagebox.showerror("Error", "Invalid email address format.")
            return

        # Add contact
        self.contacts.append({"name": name, "phone": phone, "email": email})
        self.update_contact_listbox()
        self.clear_entries()
        messagebox.showinfo("Success", f"Contact '{name}' added successfully.")

    def validate_email(self, email):
        # Basic email validation using regex
        email_regex = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        return re.match(email_regex, email)

    def update_contact_listbox(self):
        self.contact_listbox.delete(0, tk.END)
        for contact in self.contacts:
            self.contact_listbox.insert(tk.END, f"{contact['name']} - {contact['phone']} - {contact['email']}")

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)

    def view_contacts(self):
        if not self.contacts:
            messagebox.showinfo("Contacts", "No contacts available.")
            return

    def edit_contact(self):
        try:
            selected_index = self.contact_listbox.curselection()[0]
            selected_contact = self.contacts[selected_index]

            self.name_entry.delete(0, tk.END)
            self.name_entry.insert(0, selected_contact['name'])
            self.phone_entry.delete(0, tk.END)
            self.phone_entry.insert(0, selected_contact['phone'])
            self.email_entry.delete(0, tk.END)
            self.email_entry.insert(0, selected_contact['email'])

            # Remove the original contact before updating
            self.contacts.pop(selected_index)
        except IndexError:
            messagebox.showwarning("Edit Contact", "Please select a contact to edit.")

    def delete_contact(self):
        try:
            selected_index = self.contact_listbox.curselection()[0]
            deleted_contact = self.contacts.pop(selected_index)
            self.update_contact_listbox()
            messagebox.showinfo("Success", f"Contact '{deleted_contact['name']}' deleted successfully.")
        except IndexError:
            messagebox.showwarning("Delete Contact", "Please select a contact to delete.")

    def search_contacts(self):
        search_window = tk.Toplevel(self.root)
        search_window.title("Search Contacts")

        search_label = tk.Label(search_window, text="Search:")
        search_label.pack(pady=(10, 5))

        search_entry = tk.Entry(search_window)
        search_entry.pack(pady=5)

        def search():
            search_results = []
            query = search_entry.get().lower()
            for contact in self.contacts:
                if (query in contact["name"].lower() or
                        query in contact["phone"] or
                        query in contact["email"].lower()):
                    search_results.append(f"{contact['name']} - {contact['phone']} - {contact['email']}")

            if search_results:
                messagebox.showinfo("Search Results", "\n".join(search_results))
            else:
                messagebox.showinfo("Search Results", "No matching contacts found.")

        search_button = tk.Button(search_window, text="Search", command=search)
        search_button.pack(pady=(5, 10))

    def group_contacts(self):
        group_window = tk.Toplevel(self.root)
        group_window.title("Group Contacts")

        group_label = tk.Label(group_window, text="Group by:")
        group_label.pack(pady=(10, 5))

        group_options = ["None", "By Name", "By Phone"]
        group_var = tk.StringVar(value="None")
        group_menu = tk.OptionMenu(group_window, group_var, *group_options)
        group_menu.pack(pady=5)

        def group():
            group_by = group_var.get()
            if group_by == "By Name":
                grouped = sorted(self.contacts, key=lambda x: x['name'])
            elif group_by == "By Phone":
                grouped = sorted(self.contacts, key=lambda x: x['phone'])
            else:
                grouped = self.contacts

            grouped_list = "\n".join([f"Name: {c['name']}, Phone: {c['phone']}, Email: {c['email']}" for c in grouped])
            messagebox.showinfo("Grouped Contacts", grouped_list)

        group_button = tk.Button(group_window, text="Group", command=group)
        group_button.pack(pady=(5, 10))

    def sort_contacts(self):
        if not self.contacts:
            messagebox.showinfo("Sort Contacts", "No contacts available to sort.")
            return

        self.contacts.sort(key=lambda x: x['name'])
        self.update_contact_listbox()
        messagebox.showinfo("Sort Contacts", "Contacts sorted by name.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactManager(root)
    root.mainloop()
